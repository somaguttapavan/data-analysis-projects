# -*- coding: utf-8 -*-
"""Traffic_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1caQWbT7WXyubpMFUB5OO0hbbk8L0hJPB
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load uploaded file
df = pd.read_csv("/content/Banglore_traffic_Dataset.csv")

# Show available columns
print("Available columns:", df.columns)

# Convert datetime column (adjust the column name if needed)
if 'date_time' in df.columns:
    df['date_time'] = pd.to_datetime(df['date_time'])
elif 'Date' in df.columns: # Changed 'date' to 'Date'
    df['date'] = pd.to_datetime(df['Date']) # Changed 'date' to 'Date'
    df['date_time'] = df['date']
else:
    raise ValueError("No date/time column found!")

# Extract hour and day
df['hour'] = df['date_time'].dt.hour
df['day_of_week'] = df['date_time'].dt.day_name()

# Plot 1: Traffic by Hour
plt.figure(figsize=(10,5))
sns.countplot(x='hour', data=df, palette='magma')
plt.title('Traffic Volume by Hour')
plt.grid(True)
plt.show()

# Plot 2: Traffic by Day of Week
plt.figure(figsize=(10,5))
sns.countplot(x='day_of_week', data=df, order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'], palette='viridis')
plt.title('Traffic Volume by Day of Week')
plt.grid(True)
plt.show()

# Encode 'day_of_week' to numeric values
df['day_num'] = df['day_of_week'].map({
    'Monday': 0, 'Tuesday': 1, 'Wednesday': 2,
    'Thursday': 3, 'Friday': 4, 'Saturday': 5, 'Sunday': 6
})

# Group data for each hour and day
grouped = df.groupby(['hour', 'day_num']).size().reset_index(name='vehicle_count')

# Features: hour and day
X = grouped[['hour', 'day_num']]
y = grouped['vehicle_count']

# Train new model
model2 = LinearRegression()
model2.fit(X, y)

# Predict volume for example (e.g., Monday 9 AM)
example = pd.DataFrame({'hour': [9], 'day_num': [0]})
pred = model2.predict(example)
print(f"ðŸšŒ Predicted traffic on Monday 9:00 AM: {int(pred[0])} vehicles")

# Predict for all hour + day combinations
grid = pd.DataFrame([(h, d) for h in range(24) for d in range(7)], columns=['hour', 'day_num'])
grid['predicted_volume'] = model2.predict(grid)

# Pivot for heatmap
pivot = grid.pivot(index='day_num', columns='hour', values='predicted_volume')
plt.figure(figsize=(12,6))
sns.heatmap(pivot, cmap='YlOrRd', annot=True, fmt='.0f', linewidths=0.5)
plt.title("Predicted Traffic Volume by Hour & Day")
plt.xlabel("Hour of Day")
plt.ylabel("Day of Week")
plt.yticks(ticks=range(7), labels=['Mon','Tue','Wed','Thu','Fri','Sat','Sun'], rotation=0)
plt.show()

#Compare Weekday vs Weekend Traffic
df['is_weekend'] = df['day_of_week'].isin(['Saturday', 'Sunday'])

plt.figure(figsize=(10,5))
sns.countplot(data=df, x='hour', hue='is_weekend', palette='Set2')
plt.title("Traffic Volume by Hour: Weekday vs Weekend")
plt.xlabel("Hour")
plt.ylabel("Volume")
plt.legend(title='Is Weekend')
plt.grid(True)
plt.show()

print(df.columns)
df['Weather Conditions'].value_counts()

#Classify Rainy/Bad Weather vs Normal Days

# Define weather conditions considered as "weather-affected"
weather_bad = ['Rain', 'Heavy Rain', 'Thunderstorm', 'Drizzle', 'Fog']

# Create boolean column
df['is_weather_day'] = df['Weather Conditions'].isin(weather_bad)

#Weather Days vs Normal Days
plt.figure(figsize=(12,6))
sns.countplot(data=df, x='hour', hue='is_weather_day', palette='Set2')
plt.title("Traffic Volume by Hour: Weather Days vs Normal Days")
plt.xlabel("Hour")
plt.ylabel("Traffic Volume")
plt.legend(title='Weather Affected Day')
plt.grid(True)
plt.show()

#Day-by-Day Weather Pattern Summary
# First, ensure we have the 'is_bad_weather_day' column
bad_weather = ['Rain', 'Heavy Rain', 'Thunderstorm', 'Fog', 'Drizzle']
df['is_bad_weather_day'] = df['Weather Conditions'].isin(bad_weather)

# Count bad weather days per month
monthly_weather = df.groupby(df['date'].dt.to_period('M'))['is_bad_weather_day'].sum().reset_index()
monthly_weather['date'] = monthly_weather['date'].dt.to_timestamp()
monthly_weather.columns = ['Month', 'Bad Weather Days']

# Plot increase in bad weather days over time
plt.figure(figsize=(10,5))
sns.lineplot(data=monthly_weather, x='Month', y='Bad Weather Days', marker='o')
plt.title("ðŸ“ˆ Trend: Increase in Bad Weather Days Over Time")
plt.xlabel("Month")
plt.ylabel("Number of Rainy/Foggy Days")
plt.grid(True)
plt.show()

print(df.columns)

# Ensure date is datetime
df['year'] = pd.to_datetime(df['date']).dt.year

# Calculate total incident reports per year
yearly_incidents = df.groupby('year')['Incident Reports'].sum().reset_index()
yearly_incidents.columns = ['Year', 'Total Incident Reports']
yearly_incidents['% Change'] = yearly_incidents['Total Incident Reports'].pct_change() * 100

yearly_incidents


plt.figure(figsize=(10,5))
sns.barplot(data=yearly_incidents, x='Year', y='Total Incident Reports', palette='OrRd')
plt.title("ðŸ§¾ Yearly Incident Reports (Proxy for Death/Accident Trends)")
plt.grid(True)
plt.ylabel("Incident Count")
plt.show()

plt.figure(figsize=(10,5))
sns.lineplot(data=yearly_incidents, x='Year', y='% Change', marker='o', color='green')
plt.axhline(0, linestyle='--', color='gray')
plt.title("ðŸ“ˆ YoY Change in Reported Incidents")
plt.ylabel("% Change")
plt.grid(True)
plt.show()